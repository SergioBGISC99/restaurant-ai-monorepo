generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "windows", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String      @id @default(uuid())
    name      String
    email     String      @unique
    password  String
    role      Role        @default(USUARIO)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    assistant Assistant[]
    branch    Branch[]
}

model Assistant {
    id          String   @id @default(uuid())
    assistantId String   @unique
    user        User?    @relation(fields: [userId], references: [id])
    userId      String?
    branch      Branch[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Branch {
    id          String     @id @default(uuid())
    name        String
    address     String
    user        User       @relation(fields: [userId], references: [id])
    userId      String
    assistant   Assistant? @relation(fields: [assistantId], references: [id])
    assistantId String?
    product     Product[]
    order       Order[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model Product {
    id        String      @id @default(uuid())
    name      String
    price     Float
    branch    Branch      @relation(fields: [branchId], references: [id])
    branchId  String
    isActive  Boolean     @default(true)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    orderItem OrderItem[]
}

model Order {
    id             String      @id @default(uuid())
    branch         Branch      @relation(fields: [branchId], references: [id])
    branchId       String
    userPhone      String
    userName       String
    items          OrderItem[]
    status         OrderStatus @default(PENDING)
    openaiThreadId String?
    createdAt      DateTime    @default(now())
}

model OrderItem {
    id        String  @id @default(uuid())
    order     Order   @relation(fields: [orderId], references: [id])
    orderId   String
    product   Product @relation(fields: [productId], references: [id])
    productId String
    quantity  Int
}

enum Role {
    ADMIN
    CLIENTE
    USUARIO
}

enum OrderStatus {
    PENDING
    CONFIRMED
    PAID
    CANCELLED
}
